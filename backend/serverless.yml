service: lab-reporter

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

package:
  patterns:
    - '!test/**'

useDotenv: false

provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    ENTRY_TABLE: Entries-${self:provider.stage}
    USERS_TABLE: Users-${self:provider.stage}
    GROUPS_TABLE: Groups-${self:provider.stage}
    ATTACHMENTS_BUCKET: lab-attachments-209405735061-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    ENTRY_ID_INDEX: EntryIdIndex

  tracing:
    lambda: true
    apiGateway: true

custom:
  topicName: attachmentTopic

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateEntry:
    handler: src/lambda/http/createGroup.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    events:
      - http:
          method: post
          path: groups
          cors: true
          authorizer: Auth

  GetGroups:
    handler: src/lambda/http/getGroups.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    events:
      - http:
          method: get
          path: groups
          cors: true
          authorizer: Auth

  GetUserById:
    handler: src/lambda/http/getUserById.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: get
          path: users
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - UserID
          authorizer: Auth

  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: patch
          path: users
          cors: true
          authorizer: Auth

  GetEntries:
    handler: src/lambda/http/getEntries.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
    events:
      - http:
          method: get
          path: entries
          cors: true
          authorizer: Auth

  GetEntryById:
    handler: src/lambda/http/getEntryById.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}/index/${self:provider.environment.ENTRY_ID_INDEX}
    events:
      - http:
          method: get
          path: entries/{entryId}
          cors: true
          authorizer: Auth

  CreateEntry:
    handler: src/lambda/http/createEntry.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
    events:
      - http:
          method: post
          path: entries
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/models/create-entry-schema.json)}

  UpdateEntry:
    handler: src/lambda/http/updateEntry.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}/index/${self:provider.environment.ENTRY_ID_INDEX}
    events:
      - http:
          method: patch
          path: entries/{entryId}
          cors: true
          authorizer: Auth

  DeleteEntry:
    handler: src/lambda/http/deleteEntry.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}/index/${self:provider.environment.ENTRY_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
    events:
      - http:
          method: delete
          path: entries/{entryId}
          cors: true
          authorizer: Auth

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
    events:
      - http:
          method: post
          path: entries/{entryId}/attachment
          cors: true
          authorizer: Auth

  DeleteAttachment:
    handler: src/lambda/http/deleteAttachment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}/index/${self:provider.environment.ENTRY_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
    events:
      - http:
          method: delete
          path: attachments/{entryId}/{key}
          cors: true
          authorizer: Auth

resources:
  Resources:
    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: entryId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.ENTRY_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ENTRY_ID_INDEX}
            KeySchema:
            - AttributeName: entryId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
    GroupsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket